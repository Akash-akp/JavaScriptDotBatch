Performance:-
Measure the speed of code.
how to write efficient code and what is the best practice


1st way:
    let t1 = performance.now();

    for(let i=1;i<=100;i++){
        let p = document.createElement('p');
        p.textContent = 'i am para '+i;
        document.body.appendChild(p);
    }

    let t2 = performance.now();

    console.log(t2-t1);

    t1 = performance.now();
    
    Here reflow and repend is max

2nd way:- (little optimised)
    let d = document.createElement('div');
    for(let i=1;i<=100;i++){
        let p = document.createElement('p');
        p.textContent = 'i am para '+i;
        d.appendChild(p);
    }
    document.body.appendChild(d);
    t2 = performance.now();

    console.log(t2-t1);

    t1 = performance.now();

    Here reflow and repend is little less.

3rd way:-(best practice)
    let fragment = document.createDocumentFragment();
    for(let i=1;i<=100;i++){
        let p = document.createElement('p');
        p.textContent = 'i am para '+i;
        fragment.appendChild(p);
    }
    document.body.appendChild(fragment);
    t2 = performance.now();

    console.log(t2-t1);

    Here reflow and repend occur once.

Best practice :-- To have less reflow and repend

---------------------------------------------------------------------------------------------

Call Stack:-

JavaScript is single thread language. At a time, JS can run single code at a time.
JavaScript is asynchronous and synchronous in nature.

Synchronous:-
    function a(){
        console.log("a");
    }
    function b(){
        console.log("b");
    }
    b();
    a();
    Output :- b a 

Asynchronous:-
    function a(){
        console.log("a");
    }
    document.addEventListener('click',()=>console.log('clicked'));
    function b(){
        console.log("b");
    }
    b();
    a();

    Here addEventListener function is asynchronous function.
    How it work?
      There is 
      - Call Stack
      - Browser
      - Event Queue
      In call Stack, all the command are stacked but
      when asynchronous command is stacked then it register the event to browser then pop out
      after that when some event is to call asynchronous command, it get queued in event queue
      it will wait for call stack to empty after that event queue will get treated

-------------------------------------------------------------------------------------------------

SetTimeOut:-

setTimeout(function,time in millisecond);
function will send to event queue after specified time
